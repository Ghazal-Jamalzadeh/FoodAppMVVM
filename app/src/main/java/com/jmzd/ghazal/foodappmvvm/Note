تویی MVVM فقط از Flow - LiveData - Coroutine استفاده میکنیم چون خیلی خیلی ترکیب خوبی هستن

Server----------------------------------------------------------------------------------------------
هر جا که قبلا اب رتروفیت کار میکردیم و رسپانس را در  قالب Single میگرفتیم اون single پاک میشه و و همون Response دیفالت رتروفیت میشه
برای ترکی با کروتین تمام متدها تبدیل به ساسپند فانکشن میشن

بایندیینگ رو با اون روش جدید میریم که ویوهامون از دسترس خارج شن وقتی باید بشن

Kotlin delegates------------------------------------------------------------------------------------
در مورد این خط کد:
private val viewModel: HomeViewModel by viewModels()
ممکنه بپرسید چرا از inject برای تزریق ویومدل استفاده نمیکنیم مثل بقیه چیزها؟
ما زمانی که داریم از انوتیشن @HiltViewModel در ویومدل استفاده میکنیم
و از کاتلین دلیگیت by viewModels() استفاده میکنیم
خودش اون عملیات تزریق کردن رو برای ما انجام میده
در واقع این الان تزریق شده و من نیومدم از مساوی استفاده کنم

Extensions-------------------------------------------------------------------------------------------
توی پروژه نوت اپ mvp اومدیم برای اسپینرها اکستنشن نوشتیم
اینجا هم میخوایم همون کار رو بکنیم ولی باز جنرال تر و بهینه تر از قبلی
مثلا توی ورودی قبلی لیست استرینگ میگرفتیم توی ورودی
الان میخوایم دیتاتایپ مشخصی ندیم بهش
لایه های اختصاصی تری هم داره اسپینر فود اپ نسبت به نوت اپ که از پیش فرض ها استفاده میکنه

ورودی ها:
نیاز به یک لیست از آیتم ها داریم
همچنین نیاز به یک کال بک داربم که بفهمیم کدام آیتم سلکت شده

list: MutableList<out Any>
لیست را به این شکل تعریف میکنیم
هر دیتاتایپی را قول میکنه الان. از جمله:
string - int - char - double ....
[فکر کنم فقط دیتا تایپ های اصلی را قبول میکنه و فرقش با جنریک اینه. شایدم فرقی نداره؟]

callback: (String) -> Unit

flatten--------------------------------------------------------------------------------------------
   /*
        * نکته کاتلینی:
        * ما یک لیست نیاز داریم که حروف a تا z داخلش باشه ولی نمیخوایم دستی بنویسیم
        * listOf('A'..'Z')
        * اگر این را بنویسیم خروجی به شکل زیر خواهد بود:
        * a z (یک آیتم)
        * ولی ما میخوایم خروجی به شکل زیر باشه
        * a
        * b
        * c
        * ...
        * z
        * (آیتم های جدا از هم)
        * .flatten()
        * ابن کار را برای ما انجام میده و لیست را به ترتیب میسازه
        * */
        val filters = listOf('A'..'Z').flatten()

Recycler View Extensions---------------------------------------------------------------------------------
نکات اسکرول کردن تو در تو
وقتی چندین ریسایکلر ویو عمودی یا افقی داخل یک اسکرول ویو درون یک صفحه داریم.
باید چه کار کنیم  که اسکرول ها از نظر ux وجهه خوبی داشته باشن و گیج کننده نباشن
وقتایی که میخوایم سایز مشخصی برای لایه ها داشته باشیم
زمانی که میخوایم بین آیتم های ریسایکلر ویو خط بندازیم
انیمیشن اضافه کنیم
برای کد تکراری نزدن در این موارد میایم اکستنشن مینویسیم

خب دو تا چیز حیاتی که برای ریسایکلر ویو میخوایم چیان؟
لایوت منیجر - آداپتر
بقیه چیزا که بالا گفتیم رو بهش ندیم هم مهم نیسست و کار میکنه به هر حال

layout manager:
چه نوع لایوت منیجری نیاز داری؟
لینییر؟ استگرد؟ ورتیکال؟ هاریزنتال؟ اصلا یه لایوت منیجر کاستوم شاید از اینترنت
نمیدونیم.ممکنه هر کدوم باشه
اگه قرار باشه برای هر کدوم از لایوت منیجرا هم یک اکستنشن بنویسیم هم که خب چه کاریه
میخوایم یک چیز جنرال بنویسییم که تو کل اپ به کارمون بیاد
پس دیتا تایپ رو به شکل زیر مشخص میکنیم
RecyclerView.LayoutManager
هر لایوت منیجری به این بدیم قبول میکنه

adapter:
باز من قراره انواع و اقسام اداپتر رو داشته باشم. کدومش رو بدم به اکستنشن؟
اگه قرار باشه برای هر اداپتر یک اکستنشن جدا بنویسم این که نشد جنرال
پس از RecyclerView.Adapter استفاده میکنیم
ولی این توی ورودی یک <ViewHolder> میخواد از من
هر اداپتری هم که ویو هولدر مخصوس خودشو داره
چیکار کنیم حالا؟ چیجور بفهمیم؟
از * استفاده میکنیم
یعنی هر ویوهولدری اومد رو قبول کن
RecyclerView.Adapter<*>

setHasFixedSize :
تکه کد زیر چه زمانی به درد ما میخوره؟
recyclerView.setHasFixedSize(true)
زمانی که اندازه (ارتفاع یا عرض بستگی به ریسایکلر ویومون)
مثلا توی لیست فود اپ صفحه هوم عرض همه آیتم ها یکسان است کل صفحه رو میگیره و ارتفاع کم و زیاد میشه
پس با عرض هیچ کاری ندارم و وارتفاع کم و زیاد میشه و متغیره
اگر ارتفاع ثابت باشه تکه کد بالا را در نظر میگیریم
مثلا توی پروژه نوت ارتفاع ثابت نبود
ممکن بود یک خط باشه یا ۱۰ خط
اونجا نباید از کد بالا استفاده کنیم چون ارتفاع دایم کم و زیاد میشه
ولی اینجا که ارتفاع تمام آیتم های من ثابت است باید true شود
که به ازای هر آیتم یک بار رندری صورت نگیرد برای محاسبه سایز

isNestedScrollingEnabled:
this.isNestedScrollingEnabled = false
اسکرول های تو در تو را false میکنیم
که تو دل هم اسکرول نخورن و با اتمام اسکرول اولی خود به خود دومی اسکرول بخورد
